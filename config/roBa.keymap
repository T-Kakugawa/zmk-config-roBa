#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp E             &kp R           &kp T                                      &kp Y      &kp U        &kp I              &kp O            &kp P
&kp A             &mt LEFT_ALT S  &mt LEFT_SHIFT D  &mt LCTRL F     &kp G      &kp LS(LG(S))    &kp MINUS      &kp H      &mt RCTRL J  &mt RIGHT_SHIFT K  &mt RIGHT_ALT L  &kp BACKSPACE
&mt LEFT_SHIFT Z  &kp X           &kp C             &kp V           &kp B      &kp COLON        &kp SEMICOLON  &kp N      &kp M        &kp COMMA          &kp DOT          &kp SLASH
&mkp MB1          &kp LEFT_WIN    &kp LEFT_ALT      &lt 1 LEFT_WIN  &lt 2 TAB  &lt 3 SPACE      &lt 2 ENTER    &lt 1 ESC                                                   &mkp MB1
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        KIGOU {
            bindings = <
&kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp EXCL    &kp CARET  &kp ASTERISK                       &kp INT_YEN    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL  &kp PERCENT
&kp AT            &kp SEMI           &kp DOLLAR  &kp EQUAL  &kp PLUS       &trans      &trans  &kp HASH       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp UNDER  &kp MINUS
&trans            &trans             &kp COLON   &trans     &kp BACKSLASH  &kp PIPE    &trans  &kp AMPERSAND  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp TILDE  &kp GRAVE
&trans            &trans             &trans      &trans     &trans         &trans      &trans  &trans                                                                 &kp F12
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                 &none   &kp N7        &kp N8        &kp N9        &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))    &kp UNDERSCORE  &none   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                  &trans          &kp N0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                     &trans          &trans                                            &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4                   &kp F5                     &kp LC(W)  &kp LC(PAGE_UP)  &kp UP_ARROW  &kp RC(PAGE_DOWN)  &kp RA(F4)
&kp F6   &kp F7   &kp F8  &kp F9                   &kp F10  &trans    &trans  &kp HOME   &kp LEFT_ARROW   &kp DOWN      &kp RIGHT_ARROW    &kp DELETE
&kp F11  &kp F12  &trans  &kp LG(LS(RIGHT_ARROW))  &trans   &trans    &trans  &kp END    &kp PG_UP        &trans        &kp PG_DN          &trans
&trans   &trans   &trans  &trans                   &trans   &trans    &trans  &trans                                                       &mkp MB2
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                &trans
            >;

            sensor-bindings = <&inc_dec_kp LA(TAB) RA(TAB)>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
